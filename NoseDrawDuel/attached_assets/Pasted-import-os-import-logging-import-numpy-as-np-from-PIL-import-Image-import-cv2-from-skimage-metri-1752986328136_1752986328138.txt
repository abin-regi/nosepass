import os
import logging
import numpy as np
from PIL import Image
import cv2
from skimage.metrics import structural_similarity as ssim

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ImageRecognizer:
    def __init__(self, reference_path='static/assets/reference_templates'):
        self.reference_path = reference_path

    def preprocess(self, image, size=(200, 200)):
        """Convert PIL image to grayscale, binarize, denoise, center/crop, and resize."""
        if not isinstance(image, Image.Image):
            raise ValueError("Input must be a PIL Image.")
        img = image.convert('L')  # Grayscale
        arr = np.array(img)
        # Binarize
        _, binary = cv2.threshold(arr, 127, 255, cv2.THRESH_BINARY_INV)
        # Denoise
        kernel = np.ones((3, 3), np.uint8)
        cleaned = cv2.morphologyEx(binary, cv2.MORPH_OPEN, kernel)
        cleaned = cv2.morphologyEx(cleaned, cv2.MORPH_CLOSE, kernel)
        # Center and crop
        cropped = self.center_and_crop(cleaned)
        # Resize
        cropped_img = Image.fromarray(cropped)
        cropped_img = cropped_img.resize(size, Image.Resampling.LANCZOS)
        return np.array(cropped_img)

    def center_and_crop(self, img):
        # Find largest contour
        contours, _ = cv2.findContours(img, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        if not contours:
            return img  # fallback: return as is
        largest = max(contours, key=cv2.contourArea)
        x, y, w, h = cv2.boundingRect(largest)
        # Add some padding
        pad = 10
        x = max(0, x - pad)
        y = max(0, y - pad)
        w = min(img.shape[1] - x, w + 2 * pad)
        h = min(img.shape[0] - y, h + 2 * pad)
        return img[y:y+h, x:x+w]

    def load_reference(self, character, size=(200, 200)):
        path = os.path.join(self.reference_path, f'{character}.png')
        if not os.path.exists(path):
            logger.error(f"Reference template not found: {path}")
            return None
        img = Image.open(path)
        return self.preprocess(img, size)

    def evaluate_drawing(self, drawn_image, correct_answer):
        try:
            user = self.preprocess(drawn_image)
            ref = self.load_reference(correct_answer, user.shape[::-1])
            if ref is None:
                logger.error(f"No reference for answer {correct_answer}")
                return 0.0
            # SSIM
            score1 = ssim(user, ref, data_range=255)
            if isinstance(score1, tuple):
                score1 = score1[0]
            # Template matching (normalized cross-correlation)
            try:
                res = cv2.matchTemplate(user, ref, cv2.TM_CCOEFF_NORMED)
                score2 = float(np.max(res))
            except Exception as e:
                logger.warning(f"Template matching failed: {e}")
                score2 = 0.0
            # Combine scores (weighted average)
            #score = 0.7 * score1 + 0.3 * score2   #correct
            score = 0.8* score1 + 0.3 * score2 
            logger.info(f"SSIM: {score1:.3f}, Template: {score2:.3f}, Combined: {score:.3f} for '{correct_answer}'")
            return float(score)
        except Exception as e:
            logger.error(f"Recognition error: {e}")
            return 0.0 